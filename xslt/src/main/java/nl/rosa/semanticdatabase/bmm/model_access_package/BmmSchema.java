package nl.rosa.semanticdatabase.bmm.model_access_package;

/**
 * 
 * Abstract parent of any persistable form of a BMM model, e.g.
 * P_BMM_SCHEMA.
 * 
*/
public interface BmmSchema extends BmmModelMetadata {

/* * ATTRIBUTE * */

/**
 * 
 * Version of BMM model, enabling schema evolution reasoning.
 * Persisted attribute.
 * 
*/
    BmmSchema getBmmVersion();
    void setBmmVersion(BmmSchema value);

/**
 * 
 * Inclusion list of any form of BMM model, in the form of a hash of individual include specifications, each of which at least specifies the id of another schema, and may specify a namespace via which types from the included schemas are known in this schema.
 * Persisted attribute.
 * 
*/
    BmmSchema getIncludes();
    void setIncludes(BmmSchema value);

/**
 * 
 * Generated by create_bmm_model from persisted elements.
 * 
*/
    BmmSchema getBmmModel();
    void setBmmModel(BmmSchema value);

/**
 * 
 * Current processing state.
 * 
*/
    BmmSchema getState();
    void setState(BmmSchema value);

/**
 * 
 * Name of this model, if this schema is a model root point.
 * Not set for sub-schemas that are not considered models on their own.
 * 
*/
    BmmSchema getModelName();
    void setModelName(BmmSchema value);

/**
 * 
 * Name of model expressed in schema; a 'schema' usually contains all of the packages of one 'model' of a publisher.
 * A publisher with more than one model can have multiple schemas.
 * 
*/
    BmmSchema getSchemaName();
    void setSchemaName(BmmSchema value);

/**
 * 
 * Revision of schema.
 * 
*/
    BmmSchema getSchemaRevision();
    void setSchemaRevision(BmmSchema value);

/**
 * 
 * Schema development lifecycle state.
 * 
*/
    BmmSchema getSchemaLifecycleState();
    void setSchemaLifecycleState(BmmSchema value);

/**
 * 
 * Primary author of schema.
 * 
*/
    BmmSchema getSchemaAuthor();
    void setSchemaAuthor(BmmSchema value);

/**
 * 
 * Description of schema.
 * 
*/
    BmmSchema getSchemaDescription();
    void setSchemaDescription(BmmSchema value);

/**
 * 
 * Contributing authors of schema.
 * 
*/
    BmmSchema getSchemaContributors();
    void setSchemaContributors(BmmSchema value);

/**
 * 
 * Main validation prior to generation of bmm_model.
 * 
*/
    BmmSchema get();
    void set(BmmSchema value);

/* * FUNCTION * */

/**
 * 
 * Merge in class and package definitions from other, except where the current schema already has a definition for the given type or package.
 * 
*/
    BmmSchema  merge();

/**
 * 
 * True when validation may be commenced.
 * 
*/
    BmmSchema  read_to_validate();

/**
 * 
 * Identifier of this schema, used for stating inclusions and identifying files.
 * Formed as: {BMM_DEFINITIONS}.create_schema_id ( rm_publisher, schema_name, rm_release) E.g.
 * "openehr_rm_ehr_1.0.4".
 * 
*/
    BmmSchema  schema_id();

}
