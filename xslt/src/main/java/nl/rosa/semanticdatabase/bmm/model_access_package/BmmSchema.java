package nl.rosa.semanticdatabase.bmm.model_access_package;

/**
 * 
 * Abstract parent of any persistable form of a BMM model, e.g.
 * P_BMM_SCHEMA.
 * 
*/
public interface BmmSchema extends BmmModelMetadata {

/* * ATTRIBUTE * */

/**
 * 
 * Version of BMM model, enabling schema evolution reasoning.
 * Persisted attribute.
 * 
*/
String getBmmVersion();
void setBmmVersion(var String);

/**
 * 
 * Inclusion list of any form of BMM model, in the form of a hash of individual include specifications, each of which at least specifies the id of another schema, and may specify a namespace via which types from the included schemas are known in this schema.
 * Persisted attribute.
 * 
*/
Hash<string,bmmIncludeSpec> getIncludes();
void setIncludes(var Hash<string,bmmIncludeSpec>);

/**
 * 
 * Generated by create_bmm_model from persisted elements.
 * 
*/
BmmModel getBmmModel();
void setBmmModel(var BmmModel);

/**
 * 
 * Current processing state.
 * 
*/
BmmSchemaState getState();
void setState(var BmmSchemaState);

/**
 * 
 * Name of this model, if this schema is a model root point.
 * Not set for sub-schemas that are not considered models on their own.
 * 
*/
String getModelName();
void setModelName(var String);

/**
 * 
 * Name of model expressed in schema; a 'schema' usually contains all of the packages of one 'model' of a publisher.
 * A publisher with more than one model can have multiple schemas.
 * 
*/
String getSchemaName();
void setSchemaName(var String);

/**
 * 
 * Revision of schema.
 * 
*/
String getSchemaRevision();
void setSchemaRevision(var String);

/**
 * 
 * Schema development lifecycle state.
 * 
*/
String getSchemaLifecycleState();
void setSchemaLifecycleState(var String);

/**
 * 
 * Primary author of schema.
 * 
*/
String getSchemaAuthor();
void setSchemaAuthor(var String);

/**
 * 
 * Description of schema.
 * 
*/
String getSchemaDescription();
void setSchemaDescription(var String);

/**
 * 
 * Contributing authors of schema.
 * 
*/
List<string> getSchemaContributors();
void setSchemaContributors(var List<string>);

/**
 * 
 * Do some basic validation post initial creation check that package structure is regular: only top-level packages can have qualified names no top-level package name can be a direct parent or child of another (child package must be declared under the parent) check that all classes are mentioned in the package structure check that all models refer to valid packages
 * 
*/
State = stateCreated postState getValidateCreated preState();
void setValidateCreated preState(var State = stateCreated postState);

/**
 * 
 * Finalisation work: convert packages to canonical form, i.e.
 * full hierarchy with no packages with names like aa.bb.cc set up include processing list
 * 
*/
State = stateValidatedCreated postState getLoadFinalise preState();
void setLoadFinalise preState(var State = stateValidatedCreated postState);

/**
 * 
 * Main validation prior to generation of bmm_model.
 * 
*/
getValidate();
void setValidate(var );

/**
 * 
 * Populate bmm_model from schema.
 * 
*/
State = pBmmPackageState.stateIncludesProcessed getCreateBmmModel preState();
void setCreateBmmModel preState(var State = pBmmPackageState.stateIncludesProcessed);

/* * FUNCTION * */

/**
 * 
 * Merge in class and package definitions from other, except where the current schema already has a definition for the given type or package.
 * merge ( other: BMM_SCHEMA[1] ) Pre_state: state = State_includes_pending Pre_other_valid: includes_to_process.has (included_schema.schema_id)
 * 
*/

/**
 * 
 * True when validation may be commenced.
 * read_to_validate (): Boolean Post_state: state = State_includes_processed
 * 
*/

/**
 * 
 * Identifier of this schema, used for stating inclusions and identifying files.
 * Formed as: {BMM_DEFINITIONS}.create_schema_id ( rm_publisher, schema_name, rm_release) E.g.
 * "openehr_rm_ehr_1.0.4".
 * schema_id (): String
 * 
*/

}
